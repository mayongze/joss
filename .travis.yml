# 使用 root权限
language: go
# 排除untagged分支的构建
branches:
  except:
    - /^untagged/
services:
  - docker

# go build参数
gobuild_args: -x -ldflags "-X command.GitSHA=$(git rev-parse --short HEAD || echo "GitNotFound")"

# 运行架构
arch:
  - amd64

# 执行系统
os:
  - linux

# go版本
go:
  - 1.14.6
  - tip

# 环境变量
env:
  global:
    - GO111MODULE=on
    - TARGET=linux-amd64-unit

stages:
  - test
  - name: deploy

jobs:   # 别名是matrix
  fast_finish: true
  include:  # 包含job
    - stage: deploy
      go: 1.14.6
      env: TARGET=deploy
      deploy:
        provider: releases
        api_key:
          secure: lyyU1fqGWQilPAMt2ZkdrJ0eTEQxgBGhp8OtLVDK6aaRdnAhEgBd0HN1Bli5fUbwjQs98lIAfUa8ojUd95peww9Hq+Rl6jrzEibXIsWJ1Awo1OYgX1ge5WcvN+dTZ5y/V8f3neh3PGkU0wKzcE6LP+YTZz8XTT89LUPvYXAnax+Gw6kPHxdNOSKmOpNt9hp7QPRZTE3cXmnj5ib7kG7u7GIzYBfmne5RQXOAXyCI6JhwyXqvyEmeq2AG3mrHQVSf8515rj3evPpF7AcgzkIp+1Z8sfHiinixw32x/Jy0gjXyTEeNZPExrdZZbY4sysnvYV8F90DRbxAz6kEC0GyKeNnn+SCU3+mFRj2sngc4ehoFiEGUvBhI85jn7/PJ+CwyhmzoxpXHpLLOiq9rVpleVrgKj6vyciCShp6uAsL8bNl5TrkoAud/m9d402A4xJrNAw++cWWdVamq08XoVVI3SiIo64v4+f5mzV7sxcRLwN0l4eh/8mpeR2LXdHNQKGDuQOjruzRyzfgsIIwOVFFJ2to9jFpncd1voSE9sgkyzqPO9C0OfYN5oZJPNrUylDUMIIJxUbuIx7Lj7/74sk3S90RkO4ezBR+cmTsBPznrdfEuiStSz9ddTW7rVtf7Qyxy8bE/KvPuNYuqdyw6NOYFB9u4y/CyAQ4mTSKDu0ORCvc=
        file_glob: true
        file: output/*.tar.gz
        skip_cleanup: true
        draft: true
        on:
          tags: true
          repo: mayongze/joss-cli

before_install:
  - echo "有非0退出码会立即停止运行"
  - echo "env ${DB} ${SH} ${VERSION}"
  - if [[ $TRAVIS_GO_VERSION == 1.* ]]; then echo ${TRAVIS_GO_VERSION}; fi

install:
  - echo "有非0退出码会立即停止运行"
  - echo "当目录中存在 GNUMakefile Makefile BSDmakefile makefile时不会执行默认操作"
  - echo "install有对go来说有默认值 go get -t -v ./... go get ${gobuild_args} ./..."
  - go get -t -v -d ./...

before_script:
  - echo "有非0退出吗会立即停止运行"
  - echo "before script"

script:
  - echo "TRAVIS_GO_VERSION=${TRAVIS_GO_VERSION}"
  - echo "不使用-mod=vendor就不会使用vendor目录缓存依赖，而去重新下载"
  - echo "如果存在Makefile 默认命令是make"
  - echo "如果command存在非0退出码不会中断执行,但是最终结果会是失败的"
  - echo "script 对go的默认值是 go test -v ./... go test ${gobuild_args} ./..."
  - |
    case "${TARGET}" in
      linux-amd64-unit)
        fmtRes=$(gofmt -l -s -d `find . -type f -name '*.go'| grep -v "/vendor/"`)
        if [ -n "${fmtRes}" ]; then
          echo -e "gofmt checking failed:\\n${fmtRes}"
          return 255
        fi
      ;;
      deploy)
        GO_BUILD_FLAGS='-v' ./cross-build.sh
      ;;
    esac
after_failure:
  - echo "script 阶段失败时执行"

after_success:
  - echo "script 阶段成功时执行"

before_deploy:
  - echo "[OPTIONAL] deploy 步骤之前执行"

after_deploy:
  - echo "[OPTIONAL] deploy 步骤之后执行"

after_script:
  - echo "script 阶段之后执行,最后执行"

notifications:
  email:
    recipients:
      - 1014057907@qq.com
    on_success: always
    on_failure: always